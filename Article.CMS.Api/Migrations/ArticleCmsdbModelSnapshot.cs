// <auto-generated />
using System;
using Article.CMS.Api.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Article.CMS.Api.Migrations
{
    [DbContext(typeof(ArticleCmsdb))]
    partial class ArticleCmsdbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleAPraises", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleAPraises");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleReads", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<int>("count")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleReads");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleTalks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ATText")
                        .HasColumnType("text");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTalks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ATText = "盲人裁判，太真实了吧",
                            ArticleId = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5809),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5821),
                            UserId = 3
                        },
                        new
                        {
                            Id = 2,
                            ATText = "什么居然有人敢走天桥？？？",
                            ArticleId = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5828),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5829),
                            UserId = 3
                        },
                        new
                        {
                            Id = 3,
                            ATText = "那可是天桥啊，传说走过的人都没了",
                            ArticleId = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5832),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5833),
                            UserId = 2
                        },
                        new
                        {
                            Id = 4,
                            ATText = "中国加油，冲冲冲！！！",
                            ArticleId = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5834),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5836),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            ATText = "果然如此a",
                            ArticleId = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5837),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5838),
                            UserId = 4
                        },
                        new
                        {
                            Id = 6,
                            ATText = "这没有犯规？这裁判属实有点水准啊",
                            ArticleId = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5840),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5841),
                            UserId = 3
                        },
                        new
                        {
                            Id = 7,
                            ATText = "什么台风要来了？？",
                            ArticleId = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5843),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5844),
                            UserId = 5
                        },
                        new
                        {
                            Id = 8,
                            ATText = "不慌，根本不在沿海",
                            ArticleId = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5846),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5847),
                            UserId = 1
                        },
                        new
                        {
                            Id = 9,
                            ATText = "清明雨上",
                            ArticleId = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5849),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5850),
                            UserId = 4
                        },
                        new
                        {
                            Id = 10,
                            ATText = "不负如来不负卿",
                            ArticleId = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5851),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5852),
                            UserId = 5
                        },
                        new
                        {
                            Id = 11,
                            ATText = "请君一战",
                            ArticleId = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5854),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(5855),
                            UserId = 2
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleTexts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AText")
                        .HasColumnType("text");

                    b.Property<int>("ArticleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ArticleTexts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AText = "测试数据",
                            ArticleId = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(3989),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(3994)
                        },
                        new
                        {
                            Id = 2,
                            AText = "测试数据",
                            ArticleId = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(3999),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4000)
                        },
                        new
                        {
                            Id = 3,
                            AText = "测试数据",
                            ArticleId = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4001),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4003)
                        },
                        new
                        {
                            Id = 4,
                            AText = "测试数据",
                            ArticleId = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4004),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4005)
                        },
                        new
                        {
                            Id = 5,
                            AText = "测试数据",
                            ArticleId = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4007),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(4008)
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Articles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AIntro")
                        .HasColumnType("text");

                    b.Property<string>("ATitle")
                        .HasColumnType("text");

                    b.Property<string>("ATitleImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Articles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AIntro = "这里是简介1",
                            ATitle = "震惊！一男子从天桥上面路过",
                            ATitleImageUrl = "UploadFiles/Article.jpg",
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2866),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2871),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            AIntro = "这里是简介2",
                            ATitle = "震惊！东京奥运会竟然出现这种裁判",
                            ATitleImageUrl = "UploadFiles/Article.jpg",
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2876),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2877),
                            UserId = 1
                        },
                        new
                        {
                            Id = 3,
                            AIntro = "这里是简介3",
                            ATitle = "震惊！日本选手竟然是这样的人",
                            ATitleImageUrl = "UploadFiles/Article.jpg",
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2879),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2880),
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            AIntro = "这里是简介4",
                            ATitle = "震惊！台风进入真的靠近福建了",
                            ATitleImageUrl = "UploadFiles/Article.jpg",
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2881),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2883),
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            AIntro = "这里是简介5",
                            ATitle = "歌单",
                            ATitleImageUrl = "UploadFiles/Article.jpg",
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2885),
                            IsActived = true,
                            IsDeleted = false,
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(2886),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.AuditInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("BrowserInfo")
                        .HasColumnType("text");

                    b.Property<string>("ClientIpAddress")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CustomData")
                        .HasColumnType("text");

                    b.Property<string>("Exception")
                        .HasColumnType("text");

                    b.Property<int>("ExecutionDuration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MethodName")
                        .HasColumnType("text");

                    b.Property<string>("Parameters")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("ReturnValue")
                        .HasColumnType("text");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserInfo")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AuditInfo");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ImagesUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ATImageUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CurrentName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("OriginName")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ImagesUrl");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Matters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MName")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Matters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(65),
                            IsActived = true,
                            IsDeleted = false,
                            MName = "你最喜欢的动物",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(70)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(73),
                            IsActived = true,
                            IsDeleted = false,
                            MName = "你最喜欢的人",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(75)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(76),
                            IsActived = true,
                            IsDeleted = false,
                            MName = "你的童年阴影",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(77)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(79),
                            IsActived = true,
                            IsDeleted = false,
                            MName = "最想去的地方",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(80)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(82),
                            IsActived = true,
                            IsDeleted = false,
                            MName = "最喜欢的东西",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(83)
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Powers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PName")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Powers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(918),
                            IsActived = true,
                            IsDeleted = false,
                            PName = "超级管理员",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(923)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(926),
                            IsActived = true,
                            IsDeleted = false,
                            PName = "管理员",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(927)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(929),
                            IsActived = true,
                            IsDeleted = false,
                            PName = "用户",
                            Remarks = "种子数据",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 324, DateTimeKind.Local).AddTicks(930)
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.UserInfos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ImageURL")
                        .HasColumnType("text");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("NickName")
                        .HasColumnType("text");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9100),
                            ImageURL = "UploadFiles/DefaultImg.png",
                            IsActived = true,
                            IsDeleted = false,
                            NickName = "超管测试",
                            Remarks = "种子数据",
                            Sex = "男",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9124),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9129),
                            ImageURL = "UploadFiles/DefaultImg.png",
                            IsActived = true,
                            IsDeleted = false,
                            NickName = "管理员测试",
                            Remarks = "种子数据",
                            Sex = "女",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9131),
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9133),
                            ImageURL = "UploadFiles/DefaultImg.png",
                            IsActived = true,
                            IsDeleted = false,
                            NickName = "用户测试",
                            Remarks = "种子数据",
                            Sex = "男",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9134),
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9140),
                            ImageURL = "UploadFiles/DefaultImg.png",
                            IsActived = true,
                            IsDeleted = false,
                            NickName = "用户测试",
                            Remarks = "种子数据",
                            Sex = "女",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9141),
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9143),
                            ImageURL = "UploadFiles/DefaultImg.png",
                            IsActived = true,
                            IsDeleted = false,
                            NickName = "用户测试",
                            Remarks = "种子数据",
                            Sex = "男",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 323, DateTimeKind.Local).AddTicks(9144),
                            UserId = 5
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Users", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActived")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MKey")
                        .HasColumnType("text");

                    b.Property<int>("MatterId")
                        .HasColumnType("integer");

                    b.Property<int>("PowerId")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("text");

                    b.Property<string>("UEmail")
                        .HasColumnType("text");

                    b.Property<string>("UName")
                        .HasColumnType("text");

                    b.Property<string>("Upassword")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("MatterId");

                    b.HasIndex("PowerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 319, DateTimeKind.Local).AddTicks(4374),
                            IsActived = true,
                            IsDeleted = false,
                            MKey = "没有答案",
                            MatterId = 1,
                            PowerId = 1,
                            Remarks = "种子数据",
                            UName = "admin",
                            Upassword = "113",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(4486)
                        },
                        new
                        {
                            Id = 2,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5343),
                            IsActived = true,
                            IsDeleted = false,
                            MKey = "没有答案",
                            MatterId = 1,
                            PowerId = 3,
                            Remarks = "种子数据",
                            UName = "user",
                            Upassword = "113",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5349)
                        },
                        new
                        {
                            Id = 3,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5446),
                            IsActived = true,
                            IsDeleted = false,
                            MKey = "没有答案",
                            MatterId = 1,
                            PowerId = 3,
                            Remarks = "种子数据",
                            UName = "active",
                            Upassword = "113",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5447)
                        },
                        new
                        {
                            Id = 4,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5449),
                            IsActived = true,
                            IsDeleted = false,
                            MKey = "没有答案",
                            MatterId = 1,
                            PowerId = 3,
                            Remarks = "种子数据",
                            UName = "god",
                            Upassword = "113",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5450)
                        },
                        new
                        {
                            Id = 5,
                            CreatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5452),
                            IsActived = true,
                            IsDeleted = false,
                            MKey = "没有答案",
                            MatterId = 1,
                            PowerId = 3,
                            Remarks = "种子数据",
                            UName = "wooz",
                            Upassword = "113",
                            UpdatedTime = new DateTime(2021, 8, 7, 13, 58, 1, 321, DateTimeKind.Local).AddTicks(5453)
                        });
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleAPraises", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Articles", "Article")
                        .WithMany("ArticleAPraises")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleReads", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Articles", "Article")
                        .WithMany("ArticleReads")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleTalks", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Articles", "Article")
                        .WithMany("ArticleTalks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.ArticleTexts", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Articles", "Article")
                        .WithMany("ArticleTexts")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Articles", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Users", "user")
                        .WithMany("Articles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.UserInfos", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Users", "User")
                        .WithMany("UserInfos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Users", b =>
                {
                    b.HasOne("Article.CMS.Api.Entity.Matters", "Matter")
                        .WithMany("Users")
                        .HasForeignKey("MatterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Article.CMS.Api.Entity.Powers", "Power")
                        .WithMany("Users")
                        .HasForeignKey("PowerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matter");

                    b.Navigation("Power");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Articles", b =>
                {
                    b.Navigation("ArticleAPraises");

                    b.Navigation("ArticleReads");

                    b.Navigation("ArticleTalks");

                    b.Navigation("ArticleTexts");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Matters", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Powers", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Article.CMS.Api.Entity.Users", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("UserInfos");
                });
#pragma warning restore 612, 618
        }
    }
}
